햄버거 챗봇 프로젝트: 작업 현황판
마지막 업데이트: 2025년 9월 13일

✅ 완료 (Done)
[1] 프로젝트 비전 및 목표 설정
챗봇의 핵심 기능과 사용자 경험(UX) 정의 완료.

[2] 시스템 아키텍처 설계
프론트엔드 - 백엔드 - LLM으로 이어지는 전체 구조 확정.

[3] 데이터베이스 스키마 최종 설계
MenuCategory, Products, Set_Items, Component_Change_Rules 4개 핵심 테이블 구조 확정.
ID 정책을 텍스트 기반 고유 ID('A00001' 형식)로 최종 결정.
옵션 변경 시, 백엔드에서 실시간 가격 차이를 계산하는 방식으로 로직 확정.

[4] 초기 데이터 세팅 완료
제공된 메뉴 데이터를 기반으로 전체 INSERT SQL 스크립트 작성 완료.

[5] 프로젝트 관리 및 작업 정의
전체 개발 프로세스를 단계별 Task로 나누고, 진행 상황을 추적하는 현황판 생성.

📝 진행 중 (In Progress)
Phase 1: AI 핵심 로직 설계 (Function Calling)
[6] findProduct 함수 명세 정의
사용자가 모호하게 메뉴를 말했을 때(예: "양념감자 주세요"), 백엔드가 후보 메뉴를 찾아주는 함수의 입출력 설계.

[7] addToCart 함수 명세 정의
가장 핵심적인 함수. 단품, 세트, 옵션 변경 등 모든 주문 케이스를 처리할 수 있는 함수의 입출력 설계.

[8] getCartDetails / clearCart 등 기타 함수 명세 정의
"장바구니 보여줘", "주문 취소할래" 등의 요청을 처리할 함수 설계.

Phase 2: LLM 프롬프트 엔지니어링
[9] 시스템 프롬프트 (System Prompt) 작성
챗봇의 페르소나("친절한 직원"), 역할, 반드시 지켜야 할 규칙(예: "메뉴에 없는 것은 추천하지 마세요") 등을 정의.

[10] Few-shot 예시 작성
LLM이 Function Calling을 더 정확하게 수행하도록, 몇 가지 대화 예시와 정답 JSON을 프롬프트에 포함.

Phase 3: 백엔드 개발
[11] 데이터베이스 연동 및 쿼리 로직 구현
[12] Function Calling 처리를 위한 API 엔드포인트 구현
[13] 사용자별 세션(장바구니) 관리 로직 구현

Phase 4: 프론트엔드 개발
[14] 채팅 UI 화면 개발
[15] 백엔드 API 호출 및 응답 처리 로직 구현

Phase 5: 통합 테스트 및 고도화
[16] 전체 주문 시나리오 테스트
[17] 예외 상황(품절, 잘못된 주문 등) 처리 테스트
[18] LLM 응답 품질 튜닝 및 프롬프트 개선

🚀 고도화 필요 사항

3단계: 중기 해결책 (아키텍처 개선)
[19] 캐싱 시스템 구현
자주 검색되는 메뉴 정보 Redis/메모리 캐시 적용.
동일 질문 응답 재사용으로 API 호출 감소 (예상 30-50% 절약).

[20] 비동기 처리 시스템
사용자에게 즉시 "처리중..." 응답 후 백그라운드 처리.
WebSocket 연결로 실시간 결과 전달하여 UX 개선.

[21] 로컬 추론 강화
간단한 메뉴 검색은 SQLite 유사도 검색으로 처리.
복잡한 대화 처리 및 Function Calling만 LLM 사용.

4단계: 장기 해결책 (스케일링)
[22] API 한도 및 다중 키 관리
OpenAI Tier 1→5 업그레이드 신청 (TPM 10K→200K).
다중 API 키 로드 밸런싱 시스템으로 처리량 확장.

[23] 대안 LLM 통합
Anthropic Claude, Google Gemini 등 멀티 LLM 지원.
Primary/Fallback LLM 자동 전환 로직으로 안정성 확보.

[24] 우선순위 기반 요청 처리
주문 완료 > 메뉴 검색 > 잡담 순 우선순위 큐 시스템.
VIP 고객 우선 처리 및 일반 고객 대기열 관리.

5단계: 모니터링 및 운영
[25] 실시간 모니터링 대시보드
TPM/RPM 사용량 실시간 추적 및 시각화.
Rate Limit 80% 도달 시 자동 알림 및 트래픽 조절.

[26] 성능 최적화
요청 큐 관리로 사용자 대기시간 최소화 (목표: 3초 이내).
응답 시간 SLA 모니터링 및 성능 기준 수립.

[27] 장애 대응 시스템
Circuit Breaker 패턴으로 연쇄 장애 방지.
자동 장애 복구 및 Graceful Degradation 메커니즘. s